#+TITLE:TheaterEngine Notes
#+STARTUP: showall

* Setup Instructions
** Install Docker Toolbox
   https://www.docker.com/products/docker-toolbox
** Install Docker Compose
   If you installed the Toolbox, you're done, but explicit instructions are at
   https://docs.docker.com/compose/install/
** Fetch and build images
   This is gonna take a little while.
   
   In the root directory (make sure you're on =develop=), you should see
    a =docker-compose.yml=. This describes all the services used by the
    application.

   =docker-compose build= should start collecting images and installing
    dependencies.
    
   After that's done, you'll want to run =docker-compose run theaterengine bundle install=.

   Now you'll need to prep the DB:
   
   =docker-compose run theaterengine rake db:create=

   =docker-compose run theaterengine rake db:migrate=
   
   After all that, =docker-compose down= to clean up any intermediary
   containers.

   Now, =docker-compose up= should bring up (after a few more minutes
   of dependency gathering) a bunch of services. In particular, it'll bring up
   the ELK stack logging backend, the DB, background event handling, and the
   application itself. In the future, this should be the only necessary step unless the
   Gemfile is updated.

   At this point (it may take a couple of minutes for everything to spin up),
   you'll have the site available at =192.168.99.100=.
** Assets
*** Asset Pipeline
    The Rails asset pipeline handles minification and all that good stuff,
    so all you need to worry about is writing SCSS and either JS or CoffeeScript.
    All of that lives in =/app/assets/=, and all the view code lives in =/app/views/=.
*** Bootstrap
    Documentation for the Bootstrap 4 alpha is at

    =http://v4-alpha.getbootstrap.com/getting-started/=.

    It's technically unstable, but it's very featureful, and we're using the flexbox
    variant to make layout simpler and more resilient.
*** Helpers
    There are a number of helper libraries already installed, but they're a bit hit or
    miss, so probably don't take any of them as something that will be in the final
    version, except for =simple-form=, which we use to handle form markup.
**** Minimal form
     #+BEGIN_SRC web
       <%= simple_form_for @resource, wrapper: :horizontal_form do |f| %>
         <%= f.input :field_name %>
         <%= f.button :submit, class: 'btn-primary' %>
       <% end %>
     #+END_SRC
**** Simple Form docs
     =https://github.com/plataformatec/simple_form=
*** ERB
    HTML templates are currently handled with ERB. The Rails docs are helpful.
    =http://guides.rubyonrails.org/layouts_and_rendering.html=

    Experience with another modern template language should make this pretty
    intuitive. If you find yourself writing awkward collection related logic or
    repeating yourself often, let me know and I'll alter the necessary models to make
    it nicer to work with. I'll make myself available during the ramp-up for questions
    about particular models and requests for more helpful backend code.
** Major Goals
*** Layout improvements
    The big thing during this first week is just getting the overall layout closer to the
    design pages. Don't worry too much about functionality. If you hit a point where
    it would be nice to have something in the backend to make your layout code easier,
    make a note and I'll move it to the top of my list.

    Avoid interactive functionality during this ramp-up phase. Getting the scaffolding
    for the rest of the layout is much more important, at this point, and dealing with
    functionality early is going to paint us into a corner later. The first two weeks is
    all basic UI. The second two weeks is where UX will enter into the mix.
*** Final functionality
    On my end, my main work is going to be on finalizing the major functionality and
    exposing that to the frontend. I'm also going to be expanding the test suite, and
    adding some basic acceptance testing so we can avoid manually testing UI and
    UX as we move on.

* Features
** As of 1 July 2016
*** Autocomplete backend
*** Database improvements
*** Permission system scrapped
*** ELK stack for logging and analytics
** As of 19 May 2016
*** Database (mostly) Complete
**** The backend for all major features is in place
**** Business logic still needs development, and the UI is a nightmare
**** Switched from memcached to Redis
**** Added Sidekiq for background jobs
**** Dockerized application
** As of 29 February 2016
*** Users
**** Signup
**** Authentication
**** Session management
**** API listing
*** Next steps
**** Newsfeeds
**** User following
**** Aggregated newsfeed from followed users
**** Artists and companies

* Backend
** Database
   We use Postgres to back ActiveRecord models. ActiveRecord was chosen for
   compatibility with =jsonapi-resources= and for easier developer ramp-up.
** Caching
   Requests are cached with =redis=. This is built into the container.
** Server
   To allow for straightforward scaling, we use Unicorn as our application
   server. This allows the operating system to handle load balancing by forking
   new workers while communicating with a webserver over a standard socket. Slow
   workers are automatically killed, and because the entire application is
   loaded into memory by the Unicorn master, additional forked workers are
   essentially free.

* Package documentation
** Docker
   The application now exists as a completely self-contained Docker appliance.
   Boot scripts will be forthcoming to automate the boring bits. It is
   recommended that you follow the installation instructions listed for your
   platform [[https://docs.docker.com][on the doc site]].
*** Dotenv
    =.theaterengine.env= contains the default setup info for the appllication in
    development.
** Postgres
   Postgres is now provided in the Docker container. It operates as a separate
   service from the webserver, and can be interacted with directly by using the
   standard port with the host given by =docker-machine ip=, the username
   =theaterengine= and the password given in the dotenv file.
** Redis
   Memcached has been replaced by Redis. Performance in modern versions is on
   par or better when compared to memcached, and configuration and maintenance
   will hopefully be easier. Both Sidekiq and Rails use Redis for caching, as
   well.
** JSONAPI Resources
   We use =jsonapi-resources= for the API backend. Docs are [[https://github.com/cerebris/jsonapi-resources#usage][on Github]]. Resources
   are namepaced and versioned under =/api=. Resource definitions are under
   =app/resources= and controller definitions are under =app/controllers=.

* RFC Notes
** Redirects: Relative vs. Absolute
   In June 2014, [[https://tools.ietf.org/html/rfc2616#section-14.30][RFC 2616 Section 14.30]] was replaced by [[https://tools.ietf.org/html/rfc7231#section-7.1.2][RFC 7231 Section 7.1.2]].
   In short, while it was once required by the standard that a redirect must
   provide a full URI, the updated RFC allows for relative URI references. While
   the [[https://tools.ietf.org/html/rfc7230#section-5.5][effective request URI]] is nearly always the same as the request URI, for
   the sake of safety, we redirect using full URIs. In practice, this means
   using =route_url= rather than =route_path= in redirects.
